// Generated by CoffeeScript 1.6.3
(function() {
  var Q, XMLWriter, apiToken, createNewVideosSitemap, fs, generateArtistsXmlChunk, generateSiteMapsFoArtists, generateSitemapsForVideos, generateVideosXmlChunk, getApiToken, getArtistsJsonPage, getJsonData, getVideosJsonPage, hostname, https, prepareArtistsForXml, prepareVideosForXml, promiseWhile, request, _;

  https = require("https");

  request = require("request");

  fs = require("fs");

  Q = require("q");

  _ = require("lodash");

  XMLWriter = require("xml-writer");

  hostname = "stg-apiv2.vevo.com";

  apiToken = null;

  /*
   * Gets api token, everytime new
  */


  getApiToken = function() {
    var dfrd, options, post_data;
    dfrd = Q.defer();
    post_data = JSON.stringify({
      "client_id": "e962a4ae0b634065b774729ee601a82b",
      "client_secret": "9794fb3bcd4b47488380c2bc9e5ef618",
      "grant_type": "client_credentials",
      "country": "US",
      "locale": "en-us"
    });
    options = {
      url: "https://" + hostname + "/oauth/token",
      body: post_data,
      method: "POST",
      headers: {
        'Content-Type': 'application/json'
      }
    };
    request(options, function(err, response, body) {
      if (err) {
        return dfrd.reject();
      } else {
        apiToken = JSON.parse(body).access_token;
        return dfrd.resolve();
      }
    });
    return dfrd.promise;
  };

  /*
   * Gets json data for given path from the api
  */


  getJsonData = function(page, path) {
    var dfrd, options, req;
    dfrd = Q.defer();
    console.log("getting json data, page " + page);
    options = {
      hostname: hostname,
      path: path
    };
    req = https.get(options, function(res) {
      var body;
      body = "";
      res.on('data', function(chunk) {
        return body += chunk;
      });
      res.on("end", function() {
        var ob;
        ob = JSON.parse(body);
        return dfrd.resolve(ob);
      });
      return req.on("error", function(e) {
        console.log("error in request: " + e);
        return dfrd.reject(e);
      });
    });
    return dfrd.promise;
  };

  /*
   * Gets videos data from api
  */


  getVideosJsonPage = function(page) {
    return getJsonData(page, "/videos?page=" + page + "&size=100&genre=&sort=MostViewedAllTime&token=" + apiToken);
  };

  /*
   * Gets artists data from the api
  */


  getArtistsJsonPage = function(page) {
    return getJsonData(page, "/artists?page=" + page + "&size=100&token=" + apiToken);
  };

  /*
     Takes raw videos (parsed json array) and makes them easier to use for generating sitemap xml
  */


  prepareVideosForXml = function(videos) {
    var artistSafeName, mn, video, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = videos.length; _i < _len; _i++) {
      video = videos[_i];
      mn = _.findWhere(video.artists, {
        "role": "Main"
      });
      artistSafeName = mn ? mn.urlSafeName || "" : "";
      _results.push({
        loc: "" + artistSafeName + "/" + video.urlSafeName + "/" + video.isrc,
        thumbnail_loc: video.thumbnailUrl || "",
        title: video.title || "",
        view_count: video.views.total || "",
        duration: video.duration || "",
        publication_date: video.releaseDate || "",
        family_friendly: !video.isExplicit,
        isrc: video.isrc
      });
    }
    return _results;
  };

  /*
     Takes raw artists (parsed json array) and makes them easier to use for generating sitemap xml
  */


  prepareArtistsForXml = function(artists) {
    var artist, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = artists.length; _i < _len; _i++) {
      artist = artists[_i];
      _results.push({
        name: artist.name || "",
        urlSafeName: artist.urlSafeName || "",
        thumbnailUrl: artist.thumbnailUrl || ""
      });
    }
    return _results;
  };

  /*
     Makes a chunk of xml based on videos (previosly prepared collection)
  */


  generateVideosXmlChunk = function(videoInfo, xmlWriter) {
    console.log(videoInfo);
    return xmlWriter.startElement("url").startElement("loc").text("http://www.vevo.com/watch/" + videoInfo.loc).endElement().startElement("video:video").startElement("video:player_loc").writeAttribute("allow_embed", "yes").writeAttribute("autoplay", "autoplay=1").text("http://videoplayer.vevo.com/embed/embedded?videoId=" + videoInfo.isrc + "&amp;playlist=False&amp;autoplay=0&amp;playerId=62FF0A5C-0D9E-4AC1-AF04-1D9E97EE3961&amp;playerType=embedded").endElement().startElement("video:thumbnail_loc").text(videoInfo.thumbnail_loc).endElement().startElement("video:title").text(videoInfo.title).endElement().startElement("video:description").text(videoInfo.title).endElement().startElement("video:view_count").text(videoInfo.view_count.toString()).endElement().startElement("video:duration").text(videoInfo.duration.toString()).endElement().startElement("video:publication_date").text(videoInfo.publication_date).endElement().startElement("video:family_friendly").text(videoInfo.family_friendly ? "Yes" : "No").endElement().endElement().endElement();
  };

  generateArtistsXmlChunk = function(artistInfo, xmlWriter) {
    return xmlWriter.startElement("url").startElement("loc").text("http://www.vevo.com/artist/" + artistInfo.urlSafeName).endElement().startElement("artist").startElement("thumbnail_loc").text(artistInfo.thumbnailUrl.toString()).endElement().endElement().endElement();
  };

  createNewVideosSitemap = function(index, indexMapWriter) {
    var siteMapWriter, siteMapWs;
    console.log("creating new sitemap index " + index);
    indexMapWriter.startElement("sitemap").startElement("loc").text("http://www.vevo.com/videos_sitemap_page_" + index + ".xml").endElement().endElement();
    siteMapWs = fs.createWriteStream("videos_sitemap_page_" + index + ".xml");
    siteMapWriter = new XMLWriter(true, function(string, encoding) {
      return siteMapWs.write(string, encoding);
    });
    siteMapWriter.startDocument().startElement("urlset").writeAttribute("xmlns:video", "http://www.google.com/schemas/sitemap-video/1.1").writeAttribute("xmlns", "http://www.sitemaps.org/schemas/sitemap/0.9");
    return siteMapWriter;
  };

  /*
    * While loop wrapped in a promise
  */


  promiseWhile = function(condition, body) {
    var dfrd, lp;
    dfrd = Q.defer();
    lp = function() {
      if (!condition()) {
        return dfrd.resolve();
      }
      return Q.when(body(), lp, dfrd.reject);
    };
    Q.nextTick(lp);
    return dfrd.promise;
  };

  generateSitemapsForVideos = function() {
    var ct;
    ct = {
      jsPageNo: 1,
      rowsInFile: 0,
      sitemapIndex: 0
    };
    return Q.when(getApiToken(), function() {
      var indexMapWriter, indexMapWs, siteMapWriter;
      siteMapWriter = null;
      indexMapWs = fs.createWriteStream("videos_sitemap_index.xml");
      indexMapWriter = new XMLWriter(true, function(string, encoding) {
        return indexMapWs.write(string, encoding);
      });
      indexMapWriter.startDocument().startElement("sitemapindex").writeAttribute("xmlns", "http://www.sitemaps.org/schemas/sitemap/0.9");
      return promiseWhile(function() {
        return ct.jsPageNo !== -1 && ct.jsPageNo !== 0;
      }, function() {
        return getVideosJsonPage(ct.jsPageNo).then(function(json) {
          var vid, vids, _i, _len, _results;
          if (json.videos.length < 1) {
            console.log("no more videos");
            ct.jsPageNo = -1;
            return;
          }
          if (ct.rowsInFile === 0) {
            siteMapWriter = createNewVideosSitemap(ct.sitemapIndex, indexMapWriter);
          }
          vids = prepareVideosForXml(json.videos);
          console.log("vids length " + vids.length);
          _results = [];
          for (_i = 0, _len = vids.length; _i < _len; _i++) {
            vid = vids[_i];
            generateVideosXmlChunk(vid, siteMapWriter);
            ct.rowsInFile++;
            if (ct.rowsInFile > 10000) {
              console.log("writing into videos_sitemap_page_" + ct.sitemapIndex + ".xml");
              siteMapWriter.endElement().endDocument();
              ct.sitemapIndex++;
              ct.rowsInFile = 0;
              _results.push(siteMapWriter = createNewVideosSitemap(ct.sitemapIndex, indexMapWriter));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        }).then(function() {
          return ct.jsPageNo++;
        });
      }).then(function() {
        console.log(" ending ");
        siteMapWriter.endElement().endDocument();
        return indexMapWriter.endElement().endDocument();
      }).done();
    });
  };

  generateSiteMapsFoArtists = function() {
    var jsPageNo;
    jsPageNo = 1;
    return Q.when(getApiToken(), function() {
      var sitemapWriter, sitemapWs;
      sitemapWs = fs.createWriteStream("artists_sitemap.xml");
      sitemapWriter = new XMLWriter(true, function(string, encoding) {
        return sitemapWs.write(string, encoding);
      });
      sitemapWriter.startDocument().startElement("sitemapindex").writeAttribute("xmlns", "http://www.sitemaps.org/schemas/sitemap/0.9");
      return promiseWhile(function() {
        return jsPageNo !== -1 && jsPageNo !== 0;
      }, function() {
        return getArtistsJsonPage(jsPageNo).then(function(json) {
          var art, artists, _i, _len, _results;
          if (json.artists.length < 1) {
            console.log("no more artists");
            jsPageNo = -1;
            return;
          }
          artists = prepareArtistsForXml(json.artists);
          _results = [];
          for (_i = 0, _len = artists.length; _i < _len; _i++) {
            art = artists[_i];
            _results.push(generateArtistsXmlChunk(art, sitemapWriter));
          }
          return _results;
        }).then(function() {
          return jsPageNo++;
        });
      }).then(function() {
        console.log(" ending ");
        return sitemapWriter.endElement().endDocument();
      }).done();
    });
  };

  generateSiteMapsFoArtists();

}).call(this);

/*
//@ sourceMappingURL=app.map
*/
