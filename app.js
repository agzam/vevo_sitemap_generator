// Generated by CoffeeScript 1.6.3
(function() {
  var Q, apiToken, fs, generateXmlChunk, getApiToken, getJsonPage, hostname, https, main, prepareVideosForXml, request, xmlBuilder, _;

  https = require("https");

  request = require("request");

  fs = require("fs");

  Q = require("q");

  _ = require("lodash");

  xmlBuilder = require("xmlbuilder");

  hostname = "stg-apiv2.vevo.com";

  apiToken = null;

  /*
   * Gets api token, everytime new
  */


  getApiToken = function() {
    var dfrd, options, post_data;
    dfrd = Q.defer();
    post_data = JSON.stringify({
      "client_id": "e962a4ae0b634065b774729ee601a82b",
      "client_secret": "9794fb3bcd4b47488380c2bc9e5ef618",
      "grant_type": "client_credentials",
      "country": "US",
      "locale": "en-us"
    });
    options = {
      url: "https://" + hostname + "/oauth/token",
      body: post_data,
      method: "POST",
      headers: {
        'Content-Type': 'application/json'
      }
    };
    request(options, function(err, response, body) {
      if (err) {
        return dfrd.reject();
      } else {
        apiToken = JSON.parse(body).access_token;
        return dfrd.resolve();
      }
    });
    return dfrd.promise;
  };

  /*
   * Gets videos data from api
  */


  getJsonPage = function(page) {
    var dfrd, options, req;
    dfrd = Q.defer();
    options = {
      hostname: hostname,
      path: "/videos?page=" + page + "&size=10&genre=&sort=MostViewedAllTime&token=" + apiToken
    };
    req = https.get(options, function(res) {
      var body;
      body = "";
      res.on('data', function(chunk) {
        return body += chunk;
      });
      res.on("end", function() {
        var ob;
        ob = JSON.parse(body);
        return dfrd.resolve(ob);
      });
      return req.on("error", function(e) {
        console.log("error in request: " + e);
        return dfrd.reject(e);
      });
    });
    return dfrd.promise;
  };

  /*
     Takes raw videos (parsed json array) and makes them easier to use for generating sitemap xml
  */


  prepareVideosForXml = function(videos) {
    var artistSafeName, video, vids, _i, _len;
    vids = [];
    for (_i = 0, _len = videos.length; _i < _len; _i++) {
      video = videos[_i];
      artistSafeName = _.findWhere(video.artists, {
        "role": "Main"
      }).urlSafeName;
      vids.push({
        loc: "" + artistSafeName + "/" + video.urlSafeName + "/" + video.isrc,
        thumbnail_loc: video.thumbnailUrl || "",
        title: video.title || "",
        view_count: video.views.total || "",
        duration: video.duration || "",
        publication_date: video.releaseDate || "",
        family_friendly: !video.isExplicit,
        isrc: video.isrc
      });
    }
    return vids;
  };

  /*
     Makes a chunk of xml based on videos (previosly prepared collection)
  */


  generateXmlChunk = function(videoInfo, xmlRoot) {
    var chunk;
    process.stdout.write(" " + videoInfo.isrc);
    chunk = xmlRoot.ele("url").ele("loc").txt("http://www.vevo.com/watch/" + videoInfo.loc).up().ele("video:video").ele("video:player_loc").att("allow_embed", "yes").att("autoplay", "autoplay=1").txt("http://videoplayer.vevo.com/embed/embedded?videoId=" + videoInfo.isrc + "&amp;playlist=False&amp;autoplay=0&amp;playerId=62FF0A5C-0D9E-4AC1-AF04-1D9E97EE3961&amp;playerType=embedded").up().ele("video:thumbnail_loc").txt(videoInfo.thumbnail_loc).up().ele("video:title").txt(videoInfo.title).up().ele("video:description").txt(videoInfo.title).up().ele("video:view_count").txt(videoInfo.view_count).up().ele("video:duration").txt(videoInfo.duration).up().ele("video:publication_date").txt(videoInfo.publication_date).up().ele("video:family_friendly").txt(videoInfo.family_friendly ? "Yes" : "No");
    return chunk;
  };

  main = (function() {
    var ct, indexRoot, promiseWhile;
    indexRoot = xmlBuilder.create().begin("sitemapindex").att("xmlns", "http://www.sitemaps.org/schemas/sitemap/0.9");
    ct = {
      jsPageNo: 1,
      rowsInFile: 0,
      sitemapIndex: 0
    };
    promiseWhile = function(condition, body) {
      var dfrd, lp;
      dfrd = Q.defer();
      lp = function() {
        if (!condition()) {
          return dfrd.resolve();
        }
        return Q.when(body(), lp, dfrd.reject);
      };
      Q.nextTick(lp);
      return dfrd.promise;
    };
    return Q.when(getApiToken(), function() {
      var siteMapRoot;
      siteMapRoot = null;
      return promiseWhile(function() {
        return ct.jsPageNo !== -1;
      }, function() {
        console.log("getting page " + ct.jsPageNo);
        return getJsonPage(ct.jsPageNo).then(function(json) {
          var vi, _i, _len, _ref, _results;
          if (json.videos.length < 1) {
            console.log("no more videos");
            ct.jsPageNo = -1;
            return;
          }
          if (ct.rowsInFile === 0) {
            console.log("creating new sitemap index");
            indexRoot.ele("sitemap").ele("loc").txt("http://www.vevo.com/videos_sitemap_page_" + ct.sitemapIndex + ".xml").up().up();
            siteMapRoot = xmlBuilder.create().begin("urlset").att("xmlns:video", "http://www.google.com/schemas/sitemap-video/1.1").att("xmlns", "http://www.sitemaps.org/schemas/sitemap/0.9");
          }
          _ref = prepareVideosForXml(json.videos);
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            vi = _ref[_i];
            generateXmlChunk(vi, siteMapRoot);
            ct.rowsInFile++;
            if (ct.rowsInFile > 5000) {
              console.log("writing into " + ct.sitemapIndex + ".xml");
              fs.writeFile("videos_sitemap_page_" + ct.sitemapIndex + ".xml", siteMapRoot.toString({
                pretty: true
              }), function(err) {
                return console.log(err ? err : "videos_sitemap_page_" + ct.sitemapIndex + ".xml file was saved");
              });
              ct.sitemapIndex++;
              _results.push(ct.rowsInFile = 0);
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        }).then(function() {
          return ct.jsPageNo++;
        });
      }).then(function() {
        return fs.writeFile("videos_sitemap_index.xml", indexRoot.toString({
          pretty: true
        }), function(err) {
          return console.log(err ? err : "videos_sitemap_index.xml file was saved");
        });
      }).done();
    });
  })();

}).call(this);

/*
//@ sourceMappingURL=app.map
*/
